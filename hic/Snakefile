import os, sys
import pandas as pd

SNAKEMAKE_DIR = os.path.dirname(workflow.snakefile)

if not os.path.exists("log"):
    os.makedirs("log")


configfile: "hifiasm_hic.yaml"


MANIFEST = config.get("MANIFEST", "manifest.tab")
VERSION = config.get("HIFIASM_VERSION", "0.19.9")
ASM_THREADS = config.get("ASM_THREADS", 16)

manifest_df = pd.read_csv(
    MANIFEST, sep="\t", header=0, index_col="sample", dtype=str, comment="#"
).fillna("NA")

memory_dict = {1: 336, 2: 480}


def find_both_fofn(wildcards):
    fofn_dict = {}
    fofn_dict["hifi_fofn"] = manifest_df.at[wildcards.sample, "hifi_fofn"]
    if manifest_df.at[wildcards.sample, "ont_fofn"] != "NA":
        fofn_dict["ont_fofn"] = manifest_df.at[wildcards.sample, "ont_fofn"]
    return fofn_dict


def find_parental_yak(wildcards):
    family = manifest_df.at[wildcards.sample, "family_id"]
    return [f"parents/{family}/{parent}.yak" for parent in ["pat", "mat"]]


def find_hic_all(wildcards):
    hic_dict = {}
    for column_name in ["hic_r1_fofn", "hic_r2_fofn"]:
        with open(manifest_df.at[wildcards.sample, column_name], "r") as infile:
            hic_dict[column_name] = [line.rstrip() for line in infile]
    return hic_dict


def find_both_files(wildcards):
    file_dict = {}
    with open(manifest_df.at[wildcards.sample, "hifi_fofn"], "r") as infile:
        hifi_files = [line.rstrip() for line in infile]
    file_dict["hifi_in"] = hifi_files
    if manifest_df.at[wildcards.sample, "ont_fofn"] != "NA":
        with open(manifest_df.at[wildcards.sample, "ont_fofn"], "r") as infile:
            ont_files = [line.rstrip() for line in infile]
        file_dict["ont_in"] = ont_files
    return file_dict


def nanopore_string_prim(wildcards):
    if manifest_df.at[wildcards.sample, "ont_fofn"] != "NA":
        with open(manifest_df.at[wildcards.sample, "ont_fofn"], "r") as infile:
            ont_files = [line.rstrip() for line in infile]
        return "--ul " + ",".join(ont_files)
    else:
        return ""


def nanopore_string_hic(wildcards):
    if manifest_df.at[wildcards.sample, "ont_fofn"] != "NA":
        return "--ul /dev/null"
    else:
        return ""


def hic_string(wildcards):
    hic_dict = {}
    for column_name in ["hic_r1_fofn", "hic_r2_fofn"]:
        with open(manifest_df.at[wildcards.sample, column_name], "r") as infile:
            hic_dict[column_name] = ",".join([line.rstrip() for line in infile])
    return hic_dict


wildcard_constraints:
    version=VERSION,
    sample="|".join(manifest_df.index),
    asmtype="hifiasm|hifiasm_ont",


localrules:
    all,
    make_fai,


rule all:
    input:
        expand(
            "{sample}/assemblies/hifiasm_ont/hic/{version}/{sample}.hifiasm.hic.{hap}.p_ctg.gfa.fasta",
            hap=["hap1", "hap2"],
            sample=manifest_df.loc[manifest_df["ont_fofn"] != "NA"].index,
            version=VERSION,
        ),
        expand(
            "{sample}/assemblies/hifiasm_ont/{sample}-hic_n50-{version}.txt",
            sample=manifest_df.loc[manifest_df["ont_fofn"] != "NA"].index,
            version=VERSION,
        ),
        expand(
            "{sample}/assemblies/hifiasm/hic/{version}/{sample}.hifiasm.hic.{hap}.p_ctg.gfa.fasta",
            hap=["hap1", "hap2"],
            sample=manifest_df.loc[manifest_df["ont_fofn"] == "NA"].index,
            version=VERSION,
        ),
        expand(
            "{sample}/assemblies/hifiasm/{sample}-hic_n50-{version}.txt",
            sample=manifest_df.loc[manifest_df["ont_fofn"] == "NA"].index,
            version=VERSION,
        ),


rule hifiasm_prim:
    input:
        unpack(find_both_fofn),
        unpack(find_both_files),
    output:
        asm_hap1="{sample}/assemblies/{asmtype}/{version}/{sample}.hifiasm.bp.hap1.p_ctg.gfa",
        asm_hap2="{sample}/assemblies/{asmtype}/{version}/{sample}.hifiasm.bp.hap2.p_ctg.gfa",
    threads: ASM_THREADS
    params:
        nanopore=nanopore_string_prim,
    resources:
        mem=lambda wildcards, attempt: int(memory_dict[attempt] / ASM_THREADS),
        hrs=900,
    singularity:
        f"docker://eichlerlab/hifiasm:{VERSION}"
    shell:
        """
        hifiasm -o {wildcards.sample}/assemblies/hifiasm_ont/{wildcards.version}/{wildcards.sample}.hifiasm -t {threads} {params.nanopore} $( cat {input.hifi_fofn} )
        """


rule hifiasm_hic:
    input:
        unpack(find_hic_all),
        asm=rules.hifiasm_prim.output.asm_hap1,
    output:
        asm_pat="{sample}/assemblies/{asmtype}/{version}/{sample}.hifiasm.hic.hap1.p_ctg.gfa",
        asm_mat="{sample}/assemblies/{asmtype}/{version}/{sample}.hifiasm.hic.hap2.p_ctg.gfa",
    threads: 8
    resources:
        mem=int(336 / 8),
        hrs=128,
    params:
        hic_vals=hic_string,
        nanopore=nanopore_string_hic,
    singularity:
        f"docker://eichlerlab/hifiasm:{VERSION}"
    shell:
        """
        hifiasm -o {wildcards.sample}/assemblies/hifiasm_ont/{wildcards.version}/{wildcards.sample}.hifiasm -t {threads} --h1 {params.hic_vals[hic_r1_fofn]} --h2 {params.hic_vals[hic_r2_fofn]} {params.nanopore} /dev/null
        """


rule make_fasta:
    input:
        asm_pat="{sample}/assemblies/{asmtype}/{version}/{sample}.hifiasm.{phase}.hap1.p_ctg.gfa",
        asm_mat="{sample}/assemblies/{asmtype}/{version}/{sample}.hifiasm.{phase}.hap2.p_ctg.gfa",
    output:
        fa_pat="{sample}/assemblies/{asmtype}/{version}/{sample}.hifiasm.{phase}.hap1.p_ctg.gfa.fasta",
        fa_mat="{sample}/assemblies/{asmtype}/{version}/{sample}.hifiasm.{phase}.hap2.p_ctg.gfa.fasta",
    threads: 1
    resources:
        mem=4,
        hrs=1,
    singularity:
        f"docker://eichlerlab/binf-basics:0.1"
    shell:
        """
        awk '/^S/{{print ">"$2"\\n"$3}}' {input.asm_pat} | seqtk seq -l 80 > {output.fa_pat}
        awk '/^S/{{print ">"$2"\\n"$3}}' {input.asm_mat} | seqtk seq -l 80 > {output.fa_mat}
        if [[ $( echo {wildcards.phase} ) == 'dip' ]]; then
            ln -s $( basename {output.fa_pat} ) $( echo {output.fa_pat} | sed 's/hap1/pat/' )
            ln -s $( basename {output.fa_mat} ) $( echo {output.fa_mat} | sed 's/hap2/mat/' )
        fi
        """


rule make_fai:
    input:
        fa_pat=rules.make_fasta.output.fa_pat,
        fa_mat=rules.make_fasta.output.fa_mat,
    output:
        fai_pat="{sample}/assemblies/{asmtype}/{version}/{sample}.hifiasm.{phase}.hap1.p_ctg.gfa.fasta.fai",
        fai_mat="{sample}/assemblies/{asmtype}/{version}/{sample}.hifiasm.{phase}.hap2.p_ctg.gfa.fasta.fai",
    threads: 1
    resources:
        mem=4,
        hrs=1,
    singularity:
        "docker://eichlerlab/binf-basics:0.1"
    shell:
        """
        samtools faidx {input.fa_pat}
        samtools faidx {input.fa_mat}
        """


rule get_n50:
    input:
        fai_pat=rules.make_fai.output.fai_pat,
        fai_mat=rules.make_fai.output.fai_mat,
    output:
        n50_stats="{sample}/assemblies/{asmtype}/{sample}-{phase}_n50-{version}.txt",
    threads: 1
    resources:
        mem=1,
        hrs=1,
    shell:
        """
        script=/net/eichler/vol28/software/pipelines/compteam_tools/n50
        # n50 stats for paternal haplotype
        echo $(basename {input.fai_pat}) > {output.n50_stats}
        $script {input.fai_pat} >> {output.n50_stats}

        # n50 stats for maternal haplotype
        echo $(basename {input.fai_mat}) >> {output.n50_stats}
        $script {input.fai_mat} >> {output.n50_stats}
        """


rule organize_hic:
    input:
        fa_pat="{sample}/assemblies/{asmtype}/{version}/{sample}.hifiasm.hic.hap1.p_ctg.gfa.fasta",
        fa_mat="{sample}/assemblies/{asmtype}/{version}/{sample}.hifiasm.hic.hap2.p_ctg.gfa.fasta",
        fai_pat="{sample}/assemblies/{asmtype}/{version}/{sample}.hifiasm.hic.hap1.p_ctg.gfa.fasta.fai",
        fai_mat="{sample}/assemblies/{asmtype}/{version}/{sample}.hifiasm.hic.hap2.p_ctg.gfa.fasta.fai",
    output:
        fa_pat="{sample}/assemblies/{asmtype}/hic/{version}/{sample}.hifiasm.hic.hap1.p_ctg.gfa.fasta",
        fa_mat="{sample}/assemblies/{asmtype}/hic/{version}/{sample}.hifiasm.hic.hap2.p_ctg.gfa.fasta",
        fai_pat="{sample}/assemblies/{asmtype}/hic/{version}/{sample}.hifiasm.hic.hap1.p_ctg.gfa.fasta.fai",
        fai_mat="{sample}/assemblies/{asmtype}/hic/{version}/{sample}.hifiasm.hic.hap2.p_ctg.gfa.fasta.fai",
    threads: 1
    resources:
        mem=1,
        hrs=1,
    shell:
        """
        cp -l {input.fa_pat} {output.fa_pat}
        cp -l {input.fa_mat} {output.fa_mat}
        cp -l {input.fai_pat} {output.fai_pat}
        cp -l {input.fai_mat} {output.fai_mat}
        ln -sf $( basename {output.fa_pat} ) $( echo {output.fa_pat} | sed 's/hap1/pat/' )
        ln -sf $( basename {output.fa_mat} ) $( echo {output.fa_mat} | sed 's/hap2/mat/' )
        """
