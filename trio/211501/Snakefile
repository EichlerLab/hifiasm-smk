import os, sys
import pandas as pd

SNAKEMAKE_DIR = os.path.dirname(workflow.snakefile)

configfile: "hifiasm_trio.yaml"

MANIFEST = config['MANIFEST']

manifest_df = pd.read_csv(MANIFEST, sep='\t', header=0, index_col='sample')

shell.prefix("source {SNAKEMAKE_DIR}/env.cfg; ")

def find_parental_fofn(wildcards):
    return manifest_df.at[wildcards.sample,'sample_%sernal_ref' %(wildcards.parental)]

def find_sample_fofn(wildcards):
    return manifest_df.at[wildcards.sample,'sample_ref']

localrules: all

rule all:
    input:
        expand('output/{sample}.hifiasm.{suffix}', sample=manifest_df.index, suffix=["dip.r_utg.gfa","hap1.p_ctg.gfa","hap2.p_ctg.gfa"])

rule hifiasm_trio:
    input:
        parental = expand('parents/{{sample}}.{parental}.yak', parental=['mat','pat']),
        sample_fofn = find_sample_fofn
    output:
        gfa = "output/{sample}.hifiasm.dip.r_utg.gfa",
        hap1 = "output/{sample}.hifiasm.hap1.p_ctg.gfa",
        hap2 = "output/{sample}.hifiasm.hap2.p_ctg.gfa"
    threads: 48
    resources:
        mem = 2,
        hrs = 5
    shell:
        '''
        hifiasm -o output/{wildcards.sample}.hifiasm -t{threads} -1 {input.parental[0]} -2 {input.parental[1]} $(cat {input.sample_fofn})
        '''

rule yak_parents:
    input:
        parental = find_parental_fofn
    output:
        parental_yak = temp("parents/{sample}.{parental}.yak"),
    wildcard_constraints:
        parental = '|'.join(['mat', 'pat']) 
    threads: 16
    resources:
        mem = 2,
        hrs = 5
    shell:
        '''
        yak count -k31 -b37 -t{threads} -o {output.parental_yak} $(cat {input.parental})
        '''